/////////////////////////////////////////////////////////////////////////////////////////////////////
// SPISOK.H contains main class interface and Item struct ///////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
#include "EXTRA FUNCTIONS.h"
/////////////////////////////////////////////////////////////////////////////////////////////////////
// MAIN ITEM STRUCT TYPE ////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
struct Stud
{
	char* ThirdName,* FirstName,* SecondName,* JobType, *Faculty;
	int Salary;
	Stud()
	{
		ThirdName=new char[80];
		FirstName=new char[80];
		SecondName=new char[80];
		Faculty=new char[80];
		JobType=new char[80];
	}
};
struct Item 
{	
	struct
	{
		Stud info;
		Item* next;
		Item* prev;
	};
	
};
/////////////////////////////////////////////////////////////////////////////////////////////////////
// MAIN CLASS TYPE //////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
class Spisok
{
private:
// VARIABLES
	Item *Head,*Student;
	int CountStud;
	FILE *file, *file1;
	bool empty;
// METHODS
	void StandardInput(int &,Item *&); //Done! STANDARD INPUT EXTRA METHOD
	void FoundMessage(int &,Item *&); //Done! MESSAGE INDICATES SEARCH RESULTS
	void SelectionMessage(); //Done! DISPLAYS FIELDS POSSIBLE FOR PROCESSING 
public:
// METHODS
	Spisok() //Done! CONSTRUCTOR
	{
		Head = new Item;     
		Head->next = NULL;
		Student=Head;
		CountStud=0;
	}
	~Spisok() //Done! DISTRUCTOR
	{
		delete Student;
		delete Head;
	}
/////////////////////////////////////////////////////////////////////////////////////////////////////
//1) IO 
	void InputConsole(); //Done! INPUT FROM CONSOLE (REWRITE)
	void OutputConsole(); //Done! INPUT FROM CONSOLE
	void InputFile(char *); //Done! INPUT FROM FILE (REWRITE)
	void OutputFile(char *);  //Done! OUTPUT TO FILE
/////////////////////////////////////////////////////////////////////////////////////////////////////
//2) DELETION
	void DeleteElem();  // Done! DELETION OF ELEMENT FROM POSITION
	void ViborFirst();  //Done! SELECTION OF FIRST ELEMENT (DELETE ALL EXCEPT FIRST) (CAR)
	void DeleteFirst();  //Done! DELETE FIRST ELEMENT (CDR)
	void ViborAndDeleteFirst(); //Done! CLEAN LIST (CADR)
	void ResetAll();  //Done! RESET ALL LIST
/////////////////////////////////////////////////////////////////////////////////////////////////////
//3) ADDITION
	void DobavlElemVNach();  //Done! ADD ELEMENT TO HEAD
	void DobavlElemVKonets();  //Done! ADD ELEMENT TO TAIL
	void DobavlElemVPosiziy();  //Done! ADD ELEMENT TO POSITION
/////////////////////////////////////////////////////////////////////////////////////////////////////
//4) CHANGE
	void ChangeAllFields(); //Done! CHNGE ALL FIELDS OF STRUCTURE IN LIST
	void ChangeVal(); //Done! CHNGE FIELD OF STRUCTURE IN LIST
/////////////////////////////////////////////////////////////////////////////////////////////////////
//5) SPECIAL
	void Search(); //Done! // SEARCH OF STUDENT IN LIST BY ANY KEY
	void Reverse(); //Done! LIST REVERSE
	void Sort(); //Done! // SORT BY ANY KEY
	void Rakirovka(); //Done! TWO ELEMENTS ASSIGN EACH OTHER
	void CopyTo(); //Done! COPY STUDENT TO OTHER POSITION 
/////////////////////////////////////////////////////////////////////////////////////////////////////
//6) OTHER
	void Sound(); //Done! SOUND SIGNAL
/////////////////////////////////////////////////////////////////////////////////////////////////////
//7) MAIN MENU FUNC
	void MainMenu(char *,char *);
};